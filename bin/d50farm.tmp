#!/usr/bin/env ruby

# Add the file's path to lib search path
$: << File.expand_path(File.dirname(__FILE__))

require 'rubygems'
require 'net/ssh'
require 'right_aws'
require 'sqlite3'
require 'net/sftp'
require 'dm-core'
require 'yaml'

require 'client'
require 'instance'
require 'volume'
require 'setting'
require 'global_setting'
require 'nagios'
require 'address'
require 'lib'


# The constants for where the files are
D50FarmRoot = File.expand_path(File.dirname(__FILE__))
MySQLConfig = 'config/my.cnf'
SphinxConfig = 'config/sphinx.conf'
MerbDBFile = 'config/database_template.yml'
MerbManageConfig = 'config/merb-manage.yml'
MySQLBackupScript = D50FarmRoot + '/backup.rb'
MySQLRestoreScript = D50FarmRoot + '/restore.rb'
NGINXConfig = 'config/nginx.conf'
GodConfig = 'config/client_god.yml'
GodPath = File.expand_path(File.dirname(__FILE__)) + '/client.god'

# The default /var/www on application instances
VarWebDir = '/mnt/var/www/'


def main()
    # The first argument is the command and must be one of Commands
    begin
        config = read_config()

        # Set up datamapper
        url = "mysql://#{config['dbUser']}:#{config['dbPass']}@#{config['dbHost']}/d50farm"
        #DataMapper::Logger.new(STDOUT, 0)
        DataMapper.setup(:default, url)

        command = ARGV[0]
        if command == 'auto_migrate'
            DataMapper.auto_migrate!
            return
        elsif command == 'auto_upgrade'
            DataMapper.auto_upgrade!
            return
        elsif command == "print_clients"
            Client.printAll()
            return
        elsif command == "check"
            initialise_ec2()
            Instance.checkAll()
            Volume.checkAll()
            return
        elsif command == "print_farm"
          Client.all().each do |client|
            puts "Client: #{client.name}"
            Instance.print_for_client(client)
          end
          return
        elsif command == "update_nagios"
          if check_if_nagios_update()
            replace_nagios_configurations()
            restart_nagios()
          end
          return
        elsif command == "set_all_settings"
          clients = Client.all.each do |client|
            puts "Modifying client #{client.name} (#{ARGV[1]}, #{ARGV[2]})..."
            client.setSetting(ARGV[1], ARGV[2])
          end
          return
        elsif command == 'set_global_setting'
          GlobalSetting.set_setting(ARGV[1], ARGV[2])
          return
        elsif command == 'print_global_settings'
          GlobalSetting.print_settings()
          return
        elsif command == "backup_all"
          Client.all.each do |client|
            $client = client
            instance = Instance.first(:is_db => true, :client_id => client.id)
            #instance = client.instances.first(:is_db => true)
            # Check that a DB instance is running
            unless instance.nil?
              puts "Backing up #{client.name}..."
              instance.backupDB()
            end
          end
          return
        elsif command == "reset_addresses"
          initialise_ec2()
          Address.reset_addresses()
          return
        elsif command == "print_addresses"
          Address.print()
          return
        end

        if ARGV.length < 1
            raise UserError, "You didn't specify what to do or a client"
        elsif ARGV.length < 2
            raise UserError, "You didn't specify what to do"
        end

        # Get the client
        clientName = ARGV[0]
        command = ARGV[1]


        $client = Client.first(:name => clientName)

        if $client.nil? and command != "create_client"
            raise UserError, "Client not found"
        end

        # Try and set up the AWS key
        if command != "create_client"
            begin
                logger = Logger.new(STDOUT)
                logger.level = Logger::ERROR

                $ec2 = RightAws::Ec2.new(GlobalSetting.get_setting('AWSAccessKey'), 
                                         GlobalSetting.get_setting('AWSSecret'), 
                                         :logger => logger)
                $s3 = RightAws::S3.new(GlobalSetting.get_setting('AWSAccessKey'), 
                                         GlobalSetting.get_setting('AWSSecret'), 
                                         :logger => logger)
            rescue
                p $!
                puts "WARN: problem starting AWS"
            end
        end

        case command
            when "start"
                Instance.start($client)

            when "stop"
                instance = getInstanceFromArg()
                instance.stop()

            when "print"
                Instance.print_for_client($client)

            when 'rails'
                instance = getInstanceFromArg()
                instance.assignRailsRole()

            when "app"
                # get the instance id
                instance = getInstanceFromArg()
                instance.assignAppRole()

            when "db"
                instance = getInstanceFromArg()
                instance.assignDBRole()

            when "web"
                instance = getInstanceFromArg()
                instance.assignWebRole()

            when "assign_all"
                instance = getInstanceFromArg()
                instance.assignAppRole()
                instance.assignDBRole()
                instance.assignWebRole()

            when "ssh"
                instance = getRoleFromArg()
                instance.userSSH()

            when "merb_redeploy"
                $client.getAppInstances().each do |instance|
                  instance.redeploy_merb()
                end

            when "rails_redeploy"
                $client.getRailsInstances().each do |instance|
                  instance.redeploy_rails()
                end

            when "backup"
                instance = $client.getDBInstance()
                instance.backupDB()

            when "restore"
                instance = $client.getDBInstance()
                instance.restoreDB()

            when "update_nginx"
                Instance.updateWebsWithApps()

            when "checkvolume"
                volume = Volume.get(false)
                volume.check() if !volume.nil?

            when "create_client"
                Client.create(clientName)

            when "print_clients"
                Client.printAll()

            when "reset_configs"
                # Copy the necessary files
                $client.initialiseFiles()

            when "reset_settings"
                $client.setDefaultSettings()

            when "edit_settings"
                $client.q_and_a_settings()

            when "rake"
                instance = user_choose_instance($client)
                instance.rake(ARGV[2])

            when "thor"
                instance = user_choose_instance($client)
                instance.thor(ARGV[2])

            when "sphinx_reindex"
                # get all the app instances
                $client.getAppInstances().each do |instance|
                    instance.reindexSphinx()
                end

            when "restart_memcache"
                # Restart all memcaches
                $client.getAppInstances().each do |instance|
                    instance.startMemcache()
                end

            when "tail_log"
                instance = getInstanceFromArg()
                instance.tailLog()

            when "set_setting"
                $client.setSetting(ARGV[2], ARGV[3])


            when "print_settings"
                $client.printSettings()

            when "start_god"
                instance = getInstanceFromArg()
                instance.start_god()

            when "new_address"
                Address.generate($client)

            when "associate_address"
                # Get an address - only the first for now
                if $client.addresses.length == 0:
                  raise UserError, "This client doesn't have any addresses, use new_address"
                end
                address = $client.addresses[0]

                # Get an instance
                instance = getInstanceFromArg()
                address.assign_instance(instance)

            when "toggle_do_nagios_monitor"

              $client.do_nagios_monitor = ! ($client.do_nagios_monitor)
              $client.save()
              puts "Client nagios monitoring is now #{$client.do_nagios_monitor}"

            when "start_chef_instance"
              Instance.start_default_ubuntu($client)

            when "bootstrap_chef"
              instance = getInstanceFromArg()
              instance.bootstrap_chef()

            else
                raise UserError, "This is not a valid command"

        end

    rescue AppError
        puts $!.message
    rescue UserError
        puts $!.message
    end
        
end

# Get the instance when it is the second argument
def getInstanceFromArg()
    if ARGV.length < 3:
        instance = user_choose_instance($client)
    else
        id = ARGV[2]
        instance = $client.getInstanceByID(id)
    end
    raise UserError, "Unknown instance" if instance.nil?
    return instance
end


def getRoleFromArg()
    if ARGV.length < 2:
        raise UserError, "Please specify a role: app, db, web or instance id"
    end

    case ARGV[1]
        
        when "app"
            # Get an random app instance
            instances = $client.getAppInstances()

        when "db"
            instances = [$client.getDBInstance()]
        
        when "web"
            instances = $client.getWebInstances()

        else
            return getInstanceFromArg()

    end


    raise UserError, "No instances found" if instances.length == 0

    # Pick a random instance
    return instances[rand(instances.length)]
end

class UserError < StandardError
end

class AppError < StandardError
end

#db = DBHelper.new()
main()
